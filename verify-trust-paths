#!/usr/bin/python3
# coding: utf-8
import argparse
import requests
import tempfile
import subprocess
import shutil
import shlex
import os
import re
import json
from lxml.html import document_fromstring


class Verify:
    def __init__(self, workdir, keyserver="pool.sks-keyservers.net"):
        self.workdir = workdir
        self.base_cmd = ["/usr/bin/gpg", "--homedir", workdir, "-q",
                         "--no-options", "--no-auto-check-trustdb",
                         "--no-permission-warning", "--no-tty", "--batch",
                         "--display-charset", "utf-8", "--no-default-keyring",
                         "--keyserver", keyserver]
        self.all_paths = []

    def run_gpg(self, args, input=None):
        """
        Run gpg with the given command, waiting for its completion, returning stdout.

        In case gpg returns nonzero, raises a RuntimeError that includes stderr.
        """
        cmd = self.base_cmd + args
        proc = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
        stdout, stderr = proc.communicate(input=input)
        result = proc.wait()
        if result != 0:
            raise RuntimeError("{} exited with status {}: {}".format(
                " ".join(shlex.quote(x) for x in cmd),
                result,
                stderr.strip()
            ))
        return stdout

    def run_hkt(self, args, input=None):
        """
        Run hkt with the given commands, waiting for its completion, returning stdout.

        In case hkt returns nonzero, raises a RuntimeError that includes stderr.
        """
        cmd = ["/usr/bin/hkt"] + args
        proc = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)
        stdout, stderr = proc.communicate(input=input)
        result = proc.wait()
        if result != 0:
            raise RuntimeError("{} exited with status {}: {}".format(
                " ".join(shlex.quote(x) for x in cmd),
                result,
                stderr.strip()
            ))
        return stdout

    def screenscrape_possibly_connecting_keys(self, fpr1, fpr2):
        """
        Screen-scrape candidate untrusted trust paths from http://pgp.cs.uu.nl/

        Returns the set of all keyids seen in the trust paths.
        """
        res = requests.get("http://pgp.cs.uu.nl/mk_path.cgi", params={
            "FROM": fpr1,
            "TO": fpr2,
        })
        res.raise_for_status()
        page = document_fromstring(res.content)

        re_keyid = re.compile("^[A-F0-9]{8}$")

        keyids = set()
        for table in page.iter("table"):
            for tr in table.iterfind("tr"):
                for small in tr.iter("small"):
                    if not re_keyid.match(small.text): continue
                    keyids.add(small.text)

        return keyids

    def compute_possibly_connecting_keys(self, wotsapdb, fpr1, fpr2):
        """
        Use wotsap to compute untrusted trust paths between the two keys

        Returns the set of all keyids seen in the trust paths.
        """
        try:
            output = subprocess.check_output(["wotsap", "-w", wotsapdb, fpr1[-8:], fpr2[-8:]], universal_newlines=True)
        except subprocess.CalledProcessError as e:
            return set()

        keyids = set()
        re_keyid = re.compile("^0x(?P<keyid>[A-F0-9]{8})\s+")
        for line in output.splitlines():
            mo = re_keyid.match(line)
            if not mo: continue
            keyids.add(mo.group("keyid"))

        return keyids

    def download_keys(self, keyids):
        args = ["--recv"]
        args.extend(keyids)
        self.run_gpg(args)

    def check_paths(self, fpr1, fpr2):
        output = self.run_hkt(["findpaths", "--keyring", os.path.join(self.workdir, "pubring.gpg"), "", fpr1, fpr2])
        return output

    def graph_paths(self, keyring):
        # Merge local keyring with user-provided one
        keyring_pathname = os.path.join(self.workdir, "merged.gpg")
        with open(keyring_pathname, "wb") as out:
            if keyring is not None:
                with open(keyring, "rb") as krin:
                    shutil.copyfileobj(krin, out)
            with open(os.path.join(self.workdir, "pubring.gpg"), "rb") as krin:
                shutil.copyfileobj(krin, out)

        output = self.run_hkt(["graph", "--keyring", keyring_pathname, ""])
        return output

    def get_first_fpr_in_keyring(self, keyring):
        output = self.run_gpg(["--with-colons", "--with-fingerprint", keyring])
        for line in output.splitlines():
            if not line.startswith("fpr:"): continue
            return line.split(":")[9]
        raise RuntimeError("Keyring {} looks empty".format(keyring))

    def get_local_fprs(self):
        output = self.run_gpg(["--homedir", os.path.expanduser("~/.gnupg"), "--with-colons", "--with-fingerprint", "--list-secret-keys"])
        fprs = []
        for line in output.splitlines():
            if not line.startswith("fpr:"): continue
            fprs.append(line.split(":")[9])
        return fprs


def main():
    parser = argparse.ArgumentParser(
        description="Verify trust paths",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("fpr", help="fingerprint to verify")
    parser.add_argument("--wot", metavar="file.wot", help="use wotsap with a local .wot file")
    parser.add_argument("--trusted-key", metavar="fpr", help="fingerprint of a key considered trusted")
    parser.add_argument("--trusted-keyring", metavar="pathname", help="pathname of a keyring considered trusted")
    parser.add_argument("--keyserver", default="pool.sks-keyservers.net", help="keyserver to use")
    parser.add_argument("--graph", metavar="file.dot", help="output a graph instead of a verified trust path")
    args = parser.parse_args()

    with tempfile.TemporaryDirectory() as workdir:
        verify = Verify(workdir, keyserver=args.keyserver)
        if args.trusted_key:
            first_fprs = [args.trusted_key]
        elif args.trusted_keyring:
            first_fprs = [verify.get_first_fpr_in_keyring(args.trusted_keyring)]
        else:
            first_fprs = verify.get_local_fprs()

        print("First fprs", first_fprs)

        keyids = set()
        for first_fpr in first_fprs:
            if args.wot:
                keyids |= verify.compute_possibly_connecting_keys(args.wot, first_fpr, args.fpr)
            else:
                keyids |= verify.screenscrape_possibly_connecting_keys(first_fpr, args.fpr)

        print("Download extra", keyids)
        verify.download_keys(keyids)

        if args.graph:
            output = verify.graph_paths(args.trusted_keyring)
            with open(args.graph, "wt") as outfd:
                outfd.write(output)
        else:
            for first_fpr in first_fprs:
                print("From", first_fpr)
                output = verify.check_paths(first_fpr, args.fpr)
                fprs = []
                re_fpr = re.compile(r"\(\d,(?P<fpr>[A-F0-9]+)\)")
                for line in output.splitlines():
                    mo = re_fpr.match(line)
                    if not mo: continue
                    fprs.append(mo.group("fpr"))

                for fpr in fprs:
                    print(verify.run_gpg(["--fingerprint", fpr]))

if __name__ == "__main__":
    main()
